<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd"
    default-autowire="byName">

    <context:property-placeholder location="classpath:db.properties"/>
    <context:component-scan base-package="com.bjsxt.service.impl"></context:component-scan>
    <!--数据源封装类   -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
    <!-- 创建SqlSessionFactory对象  -->
    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--<property name="dataSource" ref="dataSource"></property>-->
        <property name="typeAliasesPackage" value="com.bjsxt.pojo"></property>
    </bean>
    <!-- 扫描器相当于mybatis.xml中mappers下package标签,扫描com.bjsxt.mapper包后给对应接口创建对象  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bjsxt.mapper"></property>
        <!--<property name="sqlSessionFactory" ref="factory"></property>-->
        <property name="sqlSessionFactoryBeanName" value="factory"></property>
    </bean>
    <!--事务管理器  -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--声明式事务  -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="ins*"/>
            <tx:method name="del*"/>
            <tx:method name="upd*"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--配置aop  -->
    <aop:config>
        <aop:pointcut expression="execution(*  com.bjsxt.service.impl.*.*(..))" id="mypoint"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="mypoint"/>
    </aop:config>
    <!-- spring管理service实现类  -->
   <!-- <bean id="usersService" class="com.bjsxt.service.impl.UsersServiceImpl">
        <property name="usersMapper" ref="usersMapper"></property>
    </bean>-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
    <bean id="myadvice" class="com.bjsxt.advice.MyAdvice"></bean>
    <aop:config>
        <aop:aspect ref="myadvice">
            <aop:pointcut id="mypoint" expression="execution(* com.bjsxt.service.impl.UsersServiceImpl.login(String)) and args(username)"/>
            <aop:before method="myBefore" pointcut-ref="mypoint" arg-names="username"/>
            &lt;!&ndash;<aop:after method=""  pointcut-ref="mypoint" arg-names="username,password"/>&ndash;&gt;
        </aop:aspect>
    </aop:config>-->
</beans>